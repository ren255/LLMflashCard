# Storage System Guide - テスト作成者向け解説

このドキュメントは、Storage モジュールのテストを作成する際に必要なシステムの動作と設計思想を理解するためのガイドです。

## システム全体像

Storage システムは、ファイル（画像・CSV）の保存・管理・検索を統合的に行うシステムです。重複排除、メタデータ管理、サムネイル生成などの機能を提供します。

### 設計原則

1. **ファイルタイプ別管理**: 画像とフラッシュカードを別々のストレージで管理
2. **重複排除**: SHA256ハッシュによる重複ファイルの検出・排除
3. **メタデータ分離**: ファイル操作とメタデータ管理を分離
4. **統合アクセス**: StorageController経由での統一的なアクセス
5. **遅延初期化**: 必要時にのみストレージインスタンスを作成

## ディレクトリ構造

システムが作成・管理するディレクトリ構造：

```
base_path/
├── db/                     # データベースファイル
│   ├── images.db
│   └── flashcards.db
├── image/                  # 画像ファイル本体
├── flashcard/              # CSVファイル本体
├── thumbnails/             # サムネイル画像
│   ├── image/
│   └── flashcard/
└── temp/                   # 一時ファイル
    ├── image/
    └── flashcard/
```

## コンポーネント解説

### StorageController（統合管理クラス）

**役割**: システム全体の入口として、各ストレージの初期化と管理を行う

**主な動作**:
- 初期化時にディレクトリ構造とデータベースを自動作成
- 各ファイルタイプのストレージインスタンスを遅延初期化
- パス情報と統計情報の集約
- リソースのクリーンアップ

**重要な設計**:
- `FILETYPE_INFO`辞書でファイルタイプ情報を管理
- プロパティアクセス（`image_storage`, `flashcard_storage`）で直感的な利用
- エラー時の適切なフォールバック

### BaseStorage（基底ストレージクラス）

**役割**: 全ストレージ共通の基本機能を提供する抽象基底クラス

**主な機能**:
- ファイル保存時の重複チェック（ハッシュベース）
- メタデータ付きファイル保存
- CRUD操作（作成・読取・更新・削除）
- コレクション管理
- 検索機能

**重要な動作フロー**:
1. `save_file()`: ハッシュ計算 → 重複チェック → ファイル保存 → メタデータ保存
2. `delete()`: メタデータ取得 → ファイル削除 → サムネイル削除 → DB削除
3. `get()`: DB検索 → フルパス付与 → 返却

### ImageStorage（画像専用ストレージ）

**役割**: 画像ファイルの管理と画像固有の機能を提供

**画像固有機能**:
- サムネイル自動生成（JPEG、200x200px）
- 画像メタデータ抽出（幅・高さ・フォーマット）
- 分割画像の親子関係管理
- マスク情報のリンク機能
- フォーマット・サイズ別統計

**サムネイル処理**:
- RGBA/LA/P形式を自動的にRGBに変換
- アスペクト比保持でリサイズ
- JPEG最適化（quality=85）

### FlashcardStorage（フラッシュカード専用ストレージ）

**役割**: CSVファイルの管理とCSV固有の機能を提供

**CSV固有機能**:
- エンコーディング自動検出（UTF-8 → Shift-JIS の順で試行）
- 区切り文字の管理
- カラム情報の抽出・保存
- 行数カウント
- エンコーディング・区切り文字別統計

**エンコーディング処理**:
1. UTF-8で読み込み試行
2. 失敗時にShift-JISで再試行
3. 両方失敗時は"unknown"として保存

### FileManager（ファイル操作クラス）

**役割**: ファイルシステムとの実際のやり取りを担当

**主な機能**:
- ファイルの保存・削除・移動
- SHA256ハッシュ計算
- 一意ファイル名生成（UUID4ベース）
- サムネイル生成
- 一時ファイル管理

**ハッシュ計算**:
- 4096バイトずつ読み込んでSHA256計算
- メモリ効率を考慮した実装

### BaseMetadataManager（メタデータ管理基底クラス）

**役割**: データベース操作の共通機能を提供

**主な機能**:
- スキーマに基づくテーブル初期化
- CRUD操作（スキーマ検証付き）
- ハッシュ・ID・コレクションでの検索
- 条件検索機能

**データ検証**:
- 保存・更新時にスキーマに存在するフィールドのみを処理
- 不正なフィールドは自動的に除外

## データフロー

### ファイル保存フロー

```
1. ユーザーがsave()呼び出し
2. FileManagerがハッシュ計算
3. MetadataManagerが重複チェック
4. 重複なし → FileManagerがファイル保存
5. MetadataManagerがメタデータ抽出
6. FileManagerがサムネイル生成
7. MetadataManagerがDB保存
8. record_idを返却
```

### ファイル削除フロー

```
1. ユーザーがdelete(record_id)呼び出し
2. MetadataManagerがメタデータ取得
3. FileManagerが実ファイル削除
4. FileManagerがサムネイル削除
5. MetadataManagerがDB削除
```

## エラーハンドリング

### 原則
- 各層で適切な例外キャッチとログ出力
- 上位層への例外伝播は最小限
- 失敗時はNone/False/空リストを返却

### 主要なエラーケース
- ファイル読み込み失敗 → メタデータをNullで保存
- 権限エラー → エラーログ出力、処理継続
- ディクス容量不足 → 例外発生、処理中断
- 重複ファイル → 警告ログ、Noneを返却

## テスト観点

### 単体テスト重点項目
1. **初期化処理**: ディレクトリ作成、DB初期化、権限エラー
2. **ファイル操作**: 保存成功/失敗、削除成功/失敗、重複検出
3. **メタデータ**: 抽出精度、スキーマ検証、エンコーディング対応
4. **検索機能**: 条件検索、コレクション検索、統計情報
5. **エラーハンドリング**: 各種例外状況での適切な動作

### 統合テスト重点項目
1. **コンポーネント連携**: 各クラス間の正しいデータフロー
2. **トランザクション**: ファイル保存失敗時の一貫性
3. **リソース管理**: メモリリーク、ファイルハンドルリーク
4. **同期処理**: 並行アクセス時の動作（現在は非対応）



